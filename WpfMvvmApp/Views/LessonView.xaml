<!-- WpfMvvmApp/Views/LessonView.xaml -->
<UserControl x:Class="WpfMvvmApp.Views.LessonView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:WpfMvvmApp.Views"
             xmlns:converters="clr-namespace:WpfMvvmApp.Converters"
             xmlns:models="clr-namespace:WpfMvvmApp.Models"
             xmlns:vm="clr-namespace:WpfMvvmApp.ViewModels"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:rules="clr-namespace:WpfMvvmApp.ValidationRules"
             mc:Ignorable="d"
             d:DesignHeight="450" d:DesignWidth="800"
             d:DataContext="{d:DesignInstance Type=vm:ContractViewModel}">

    <UserControl.Resources>
        <!-- Convertitori -->
        <converters:BoolToButtonTextConverter x:Key="BoolToButtonTextConverter"/>
        <converters:BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
        <converters:InverseBooleanConverter x:Key="InverseBooleanConverter"/>

        <!-- Stili -->
        <Style TargetType="{x:Type ListViewItem}">
            <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsConfirmed}" Value="False"><Setter Property="Background" Value="LightGoldenrodYellow"/></DataTrigger>
                <DataTrigger Binding="{Binding IsConfirmed}" Value="True"><Setter Property="Background" Value="PaleGreen"/></DataTrigger>
                <Trigger Property="IsSelected" Value="True"><Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/><Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/></Trigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ActionButtonStyle" TargetType="Button">
             <Setter Property="Margin" Value="2"/><Setter Property="Padding" Value="5,2"/><Setter Property="MinWidth" Value="50"/>
             <Style.Triggers><Trigger Property="IsEnabled" Value="False"><Setter Property="Opacity" Value="0.5"/></Trigger></Style.Triggers>
        </Style>
        <Style x:Key="InputTextBoxStyle" TargetType="{x:Type TextBox}">
             <Setter Property="Margin" Value="0,0,15,0"/>
             <Setter Property="VerticalContentAlignment" Value="Center"/>
             <Setter Property="Validation.ErrorTemplate" Value="{x:Null}"/>
             <Style.Triggers>
                 <Trigger Property="Validation.HasError" Value="true">
                     <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors).CurrentItem.ErrorContent}"/>
                     <Setter Property="BorderBrush" Value="Red"/>
                     <Setter Property="BorderThickness" Value="1.5"/>
                 </Trigger>
             </Style.Triggers>
        </Style>
    </UserControl.Resources>

    <Grid Margin="5">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <TextBlock Text="Lessons" FontWeight="Bold" FontSize="14" Margin="0,0,0,10" HorizontalAlignment="Center" Grid.Row="0" />

        <!-- Lista Lezioni -->
        <ListView Grid.Row="1"
                  Name="LessonsListView" 
                  ItemsSource="{Binding Lessons}"
                  Margin="0,0,0,10"
                  ScrollViewer.VerticalScrollBarVisibility="Auto"
                  SelectionMode="Extended"> <!-- Abilita selezione multipla -->

            <!-- Interaction Triggers per KeyDown -->
            <i:Interaction.Triggers>
                <!-- Trigger per il tasto Delete -->
                <i:KeyTrigger Key="Delete">
                    <!-- Invoca il comando RemoveSelectedLessonsCommand -->
                    <i:InvokeCommandAction
                        Command="{Binding RemoveSelectedLessonsCommand}"
                        CommandParameter="{Binding ElementName=LessonsListView, Path=SelectedItems}"/>
                        <!-- Passa gli elementi selezionati come parametro usando ElementName -->
                </i:KeyTrigger>
            </i:Interaction.Triggers>

            <ListView.ItemContainerStyle><StaticResource ResourceKey="{x:Type ListViewItem}"/></ListView.ItemContainerStyle>
            <ListView.View>
                <GridView>
                    <GridViewColumn Header="Date" Width="100" DisplayMemberBinding="{Binding Date, StringFormat='dd/MM/yyyy'}" />
                    <GridViewColumn Header="Duration" Width="80" DisplayMemberBinding="{Binding Duration, StringFormat='hh\\:mm'}" />
                    <GridViewColumn Header="Confirmed" Width="80">
                        <GridViewColumn.CellTemplate><DataTemplate DataType="{x:Type models:Lesson}">
                            <CheckBox IsChecked="{Binding IsConfirmed, Mode=OneWay}" HorizontalAlignment="Center" VerticalAlignment="Center"
                                      ToolTip="Click to confirm/unconfirm lesson" IsEnabled="{Binding DataContext.IsEditingLesson, RelativeSource={RelativeSource AncestorType=ListView}, Converter={StaticResource InverseBooleanConverter}}">
                                <i:Interaction.Triggers><i:EventTrigger EventName="Click">
                                    <i:InvokeCommandAction Command="{Binding DataContext.ToggleLessonConfirmationCommand, RelativeSource={RelativeSource AncestorType=ListView}}" CommandParameter="{Binding}"/>
                                </i:EventTrigger></i:Interaction.Triggers>
                            </CheckBox>
                        </DataTemplate></GridViewColumn.CellTemplate>
                    </GridViewColumn>
                    <GridViewColumn Header="Actions" Width="Auto">
                        <GridViewColumn.CellTemplate><DataTemplate DataType="{x:Type models:Lesson}">
                            <StackPanel Orientation="Horizontal">
                                <Button Content="Edit" Style="{StaticResource ActionButtonStyle}" Command="{Binding DataContext.EditLessonCommand, RelativeSource={RelativeSource AncestorType=ListView}}" CommandParameter="{Binding}" ToolTip="Edit this lesson" />
                                <Button Content="Remove" Style="{StaticResource ActionButtonStyle}" Background="LightCoral" Command="{Binding DataContext.RemoveLessonCommand, RelativeSource={RelativeSource AncestorType=ListView}}" CommandParameter="{Binding}" ToolTip="Remove this lesson"/>
                            </StackPanel>
                        </DataTemplate></GridViewColumn.CellTemplate>
                    </GridViewColumn>
                </GridView>
            </ListView.View>
        </ListView>

        <!-- Pannello per Aggiungere/Modificare Lezione -->
        <Border Grid.Row="2" BorderBrush="LightGray" BorderThickness="0,1,0,0" Padding="10">
           <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                <TextBlock Text="Date:" VerticalAlignment="Center" Margin="0,0,5,0"/>
                <DatePicker SelectedDate="{Binding NewLessonDate}" Width="120" VerticalAlignment="Center" Margin="0,0,15,0"/>
                <TextBlock Text="Duration (HH:MM):" VerticalAlignment="Center" Margin="0,0,5,0"/>
                <TextBox Width="60" Style="{StaticResource InputTextBoxStyle}">
                     <TextBox.Text>
                         <Binding Path="NewLessonDuration" UpdateSourceTrigger="PropertyChanged" ConverterCulture="it-IT">
                             <Binding.ValidationRules>
                                 <rules:TimeSpanFormatRule ValidatesOnTargetUpdated="True"/>
                                 <ExceptionValidationRule />
                             </Binding.ValidationRules>
                         </Binding>
                     </TextBox.Text>
                </TextBox>
                <Button Style="{StaticResource ActionButtonStyle}" Background="LightGreen" Command="{Binding AddLessonCommand}">
                        <TextBlock Text="{Binding IsEditingLesson, Converter={StaticResource BoolToButtonTextConverter}}" FontWeight="SemiBold"/>
                </Button>
                <Button Content="Cancel" Style="{StaticResource ActionButtonStyle}" Background="LightGray" Command="{Binding CancelEditLessonCommand}" Visibility="{Binding IsEditingLesson, Converter={StaticResource BooleanToVisibilityConverter}}" Margin="5,0,0,0"/>
            </StackPanel>
        </Border>
    </Grid>
</UserControl>